input {
  file {
    path => ["/sdswatch/log/*.fullkv.sdswatch.log"]
    start_position => "beginning"
    type => "kv"
  }
  file {
    path => ["/sdswatch/log/*.fulldict.sdswatch.log"]
    start_position => "beginning"
    type => "dict"
  }
  file {
    path => ["/sdswatch/jobs/**/**/**/**/**/**/*.pge.sdswatch.log"]
    start_position => "beginning"
    type => "pge"
  }
}



filter {
  grok {
    match => ["message", "%{TIMESTAMP_ISO8601:sdswatch_timestamp}"]
  }
  
  #ruby {
  #  code => 'puts event.get("sdswatch_timestamp")'
  #}

  if (![sdswatch_timestamp]) {
    drop { }
  }

  if [type] == "kv" { # [type] returns the value of field "type"
    csv {
      source => "message" # parse csv format in [message]
      separator => "," 
      columns => ["sdswatch_timestamp", "host", "source_type", "source_id", "metric_key", "metric_value"]
      quote_char => "'" # allow comma within token
    } 

    mutate {
      strip => ["sdswatch_timestamp", "host", "source_type", "source_id", "metric_key", "metric_value"]
    }
  
    ruby {
      code => '
        key = event.get("metric_key")
        value = event.get("metric_value").chomp()
        if value.to_f.to_s == value || value.to_i.to_s == value
           numeric_value = value.to_f
           event.set("metric_value_float", numeric_value)
        end
      '
    }

    mutate {
      rename => ["metric_value", "metric_value_string"]
    }

  } else if [type] == "pge" { # [type] returns the value of field "type"
    csv {
      source => "message"
      separator => ","
      columns => ["sdswatch_timestamp", "metric_key", "metric_value"]
      quote_char => "'"
    }

    mutate {
      remove_field => ["host"]
      strip => ["sdswatch_timestamp", "metric_key", "metric_value"]
    }

    ruby { # use ruby code to handle tasks that Logstash doesn't provide
           # in this case, we're trying to extract source_type and source_id from the file path
           # refer to the SDSWatch wiki
      code => '
        path = event.get("path").split("/")
        source_type = path[8].delete_suffix(".pge.sdswatch.log")
        source_id = path[7]
        event.set("source_type", source_type)
        event.set("source_id", source_id)
      '
    }

    mutate {
             # ${HOST} is used to access environment variable
             # you will also want to do similarly with Filebeat client
             # because we need the HOST on verdi to fill in missing "host" of pge sdswatch logs
             # In addition, when migrating to Filebeat, it's a little bit tricky here.
             # Since you need to move the filtering part to SDSWatch server,
             # you cannot do ${HOST} anymore. I guess you have to add another field to Filebeat output on the client side.
             # I suggest adding "source_host" field from the client side, shouldn't  use "host" because there is a default "host"
             # field
       add_field => {"host" => "${HOST}"}
    }

    ruby {
      code => '
        key = event.get("metric_key")
        value = event.get("metric_value").chomp()
        if value.to_f.to_s == value || value.to_i.to_s == value
           numeric_value = value.to_f
           event.set("metric_value_float", numeric_value)
        end
      '
    }

    mutate {
      rename => ["metric_value", "metric_value_string"]
    }

  } else if [type] == "dict" { # [type] returns the value of field "type"
    csv {
      source => "message" # parse csv format in [message]
      separator => "," 
      columns => ["sdswatch_timestamp", "host", "source_type", "source_id", "kv"]
      quote_char => "'" # allow comma within token
    } 

    mutate {
      strip => ["sdswatch_timestamp", "host", "source_type", "source_id", "kv"]
    }

    kv {
      source => "[kv]"
    }

    ruby {
      code => '
        hash = event.to_hash
        hash.each { |key,value|
           if value.is_a?(String)
              value = value.chomp()
           end
           if value.to_f.to_s == value || value.to_i.to_s == value
              numeric_value = value.to_f
              event.set(key, numeric_value)
           end
        }
      '
    }

  }

  mutate {
    add_field => { "log_path" => "%{path}" }
    remove_field => ["@timestamp", "path", "type", "kv"]
  }

  ruby {
    code => '
      sds_ts = event.get("sdswatch_timestamp")
      if sds_ts.length > 23
        event.set("sdswatch_timestamp", sds_ts[0..22])
      end
    '
  }

  date { # match sdswatch_timestamp with the following patterns
    match => ["sdswatch_timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss.SSS",
              "yyyy-MM-dd HH:mm:ss,SSS", "yyyy-MM-dd'T'HH:mm:ss'Z'",
              "yyyy-MM-dd'T'HH:mm:ss.SSS", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" ] 
    timezone => "UTC"
    target => "sdswatch_timestamp"
  }

}



output { # send data to SDSWatch server
  #stdout { codec => rubydebug }

  redis {
    host => "{{ METRICS_REDIS_PVT_IP }}"
    {% if METRICS_REDIS_PASSWORD != "" %}password => "{{ METRICS_REDIS_PASSWORD }}"{% endif %}
    data_type => "list"
    key => "sdswatch"
  }
}
