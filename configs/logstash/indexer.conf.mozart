input {
  redis {
    host => "{{ MOZART_REDIS_PVT_IP }}"
    {%- if MOZART_REDIS_PASSWORD != "" %}
    password => "{{ MOZART_REDIS_PASSWORD }}"
    {%- endif %}
    # these settings should match the output of the agent
    data_type => "list"
    key => "logstash"

    # We use the 'msgpack' codec here because we expect to read
    # msgpack events from redis.
    codec => msgpack
  }
}

filter {
  if [resource] in ["worker", "task"] {
    mutate {
      convert => {
        "[event][timestamp]" => "string"
        "[event][local_received]" => "string"
      }

      split => ["[event][timestamp]", "."]
      split => ["[event][local_received]", "."]

      add_field => [ "[event][timestamp_new]" , "%{[event][timestamp][0]}" ]
      add_field => [ "[event][local_received_new]" , "%{[event][local_received][0]}" ]

      remove_field => ["[event][timestamp]", "[event][local_received]"]
    }

    mutate {
      rename => { "[event][timestamp_new]" => "timestamp" }
      rename => { "[event][local_received_new]" => "local_received" }
    }
  }

  if [resource] in ["event", "job", "task"] {
    mutate {
      add_field => { "id" => "%{uuid}" }
    }
  } else if [resource] == "worker" {
    mutate {
      add_field => { "id" => "%{celery_hostname}" }
    }
  }
}

output {
  #stdout { codec => rubydebug }

  if [resource] == "job" {
    {{ 'opensearch' if MOZART_ES_ENGINE == 'opensearch' or MOZART_AWS_ES == true else 'elasticsearch' }} {
      {%- if MOZART_ES_PVT_IP.startswith('https://') -%}
      hosts => ["{{ MOZART_ES_PVT_IP }}"]
      {% else %}
      hosts => ["{{ 'https://'~MOZART_ES_PVT_IP if JOB_AWS_ES == true or 'es.amazonaws.com' in MOZART_ES_PVT_IP else 'http://'~MOZART_ES_PVT_IP~':9200' }}"]
      {%- endif %}
      index => "%{[job][job_info][index]}"
      document_id => "%{payload_id}"
      {%- if MOZART_AWS_ES %}
      auth_type => {
        type => 'aws_iam'
        region => "{{ AWS_REGION or 'us-west-2' }}"
      }
      {%- endif %}
    }
  } else if [resource] == "worker" {
    {{ 'opensearch' if MOZART_ES_ENGINE == 'opensearch' or MOZART_AWS_ES == true else 'elasticsearch' }} {
      {%- if MOZART_ES_PVT_IP.startswith('https://') -%}
      hosts => ["{{ MOZART_ES_PVT_IP }}"]
      {% else %}
      hosts => ["{{ 'https://'~MOZART_ES_PVT_IP if JOB_AWS_ES == true or 'es.amazonaws.com' in MOZART_ES_PVT_IP else 'http://'~MOZART_ES_PVT_IP~':9200' }}"]
      {%- endif %}
      index => "worker_status-%{+YYYY.MM.dd}"
      document_id => "%{celery_hostname}"
      {%- if MOZART_AWS_ES %}
      auth_type => {
        type => 'aws_iam'
        region => "{{ AWS_REGION or 'us-west-2' }}"
      }
      {%- endif %}
    }
  } else if [resource] == "task" {
    {{ 'opensearch' if MOZART_ES_ENGINE == 'opensearch' or MOZART_AWS_ES == true else 'elasticsearch' }} {
      {%- if MOZART_ES_PVT_IP.startswith('https://') -%}
      hosts => ["{{ MOZART_ES_PVT_IP }}"]
      {% else %}
      hosts => ["{{ 'https://'~MOZART_ES_PVT_IP if JOB_AWS_ES == true or 'es.amazonaws.com' in MOZART_ES_PVT_IP else 'http://'~MOZART_ES_PVT_IP~':9200' }}"]
      {%- endif %}
      index => "%{index}"
      document_id => "%{uuid}"
      {%- if MOZART_AWS_ES %}
      auth_type => {
        type => 'aws_iam'
        region => "{{ AWS_REGION or 'us-west-2' }}"
      }
      {%- endif %}
    }
  } else if [resource] == "event" {
    {{ 'opensearch' if MOZART_ES_ENGINE == 'opensearch' or MOZART_AWS_ES == true else 'elasticsearch' }} {
      {%- if MOZART_ES_PVT_IP.startswith('https://') -%}
      hosts => ["{{ MOZART_ES_PVT_IP }}"]
      {% else %}
      hosts => ["{{ 'https://'~MOZART_ES_PVT_IP if JOB_AWS_ES == true or 'es.amazonaws.com' in MOZART_ES_PVT_IP else 'http://'~MOZART_ES_PVT_IP~':9200' }}"]
      {%- endif %}
      index => "event_status-%{+YYYY.MM.dd}"
      document_id => "%{uuid}"
      {%- if MOZART_AWS_ES %}
      auth_type => {
        type => 'aws_iam'
        region => "{{ AWS_REGION or 'us-west-2' }}"
      }
      {%- endif %}
    }
  } else {}
}
