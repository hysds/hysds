input {
  redis {
    host => "{{ MOZART_REDIS_PVT_IP }}"
    {%- if MOZART_REDIS_PASSWORD != "" %}
    password => "{{ MOZART_REDIS_PASSWORD }}"
    {%- endif %}
    # these settings should match the output of the agent
    data_type => "list"
    key => "logstash"

    # We use the 'msgpack' codec here because we expect to read
    # msgpack events from redis.
    codec => msgpack
  }
}

filter {
  if [resource] in ["worker", "task"] {
    mutate {
      convert => {
        "[event][timestamp]" => "string"
        "[event][local_received]" => "string"
      }

      split => ["[event][timestamp]", "."]
      split => ["[event][local_received]", "."]

      add_field => [ "[event][timestamp_new]" , "%{[event][timestamp][0]}" ]
      add_field => [ "[event][local_received_new]" , "%{[event][local_received][0]}" ]

      remove_field => ["[event][timestamp]", "[event][local_received]"]
    }

    mutate {
      rename => { "[event][timestamp_new]" => "timestamp" }
      rename => { "[event][local_received_new]" => "local_received" }
    }
  }

  if [resource] in ["event", "job", "task"] {
    mutate {
      add_field => { "id" => "%{uuid}" }
    }
  } else if [resource] == "worker" {
    mutate {
      add_field => { "id" => "%{celery_hostname}" }
    }
  }

  # Sets a flag to tell logstash to delete the original document
  # if we move from job_status to job_failed
  ruby {
    code => "
      event.set('delete_document', 'false')
    "
  }

  if [resource] == "job" and [status] == "job-failed" {
    ruby {
      code => "
         original_index = event.get('[job][job_info][index]');
         event.set('original_index', original_index)
         event.set('delete_document', 'true')
       "
    }
    mutate {
      replace => {
        "[job][job_info][index]" => "job_failed"
      }
    }
  }
}

output {
  #stdout { codec => rubydebug }

  if [resource] == "job" {
    if [delete_document] == "true" {
      {{ 'opensearch' if MOZART_ES_ENGINE == 'opensearch' else 'elasticsearch' }} {
        {%- if MOZART_ES_PVT_IP is iterable and MOZART_ES_PVT_IP is not string %}
        hosts => [
          {%- for url in MOZART_ES_PVT_IP %}
            {%- if url.startswith('https://') %}
              "{{ url }}"{{ "," if not loop.last else "" }}
            {%- else %}
            "{{ 'https://'~url if MOZART_AWS_ES == true or 'es.amazonaws.com' in url else 'http://'~url~':9200' }}"{{ "," if not loop.last else "" }}
            {%- endif %}
          {%- endfor %}
        ]
        {%- else %}
          {%- if MOZART_ES_PVT_IP.startswith('https://') %}
            hosts => ["{{ MOZART_ES_PVT_IP }}"]
          {%- else %}
            hosts => ["{{ 'https://'~MOZART_ES_PVT_IP if MOZART_AWS_ES == true or 'es.amazonaws.com' in MOZART_ES_PVT_IP else 'http://'~MOZART_ES_PVT_IP~':9200' }}"]
          {%- endif %}
        {%- endif %}
        index => "%{[original_index]}"
        document_id => "%{payload_id}"
        action => "delete"
        ecs_compatibility => disabled
      }
    }
    {{ 'opensearch' if MOZART_ES_ENGINE == 'opensearch' else 'elasticsearch' }} {
      {%- if MOZART_ES_PVT_IP is iterable and MOZART_ES_PVT_IP is not string %}
      hosts => [
        {%- for url in MOZART_ES_PVT_IP %}
          {%- if url.startswith('https://') %}
        "{{ url }}"{{ "," if not loop.last else "" }}
          {%- else %}
        "{{ 'https://'~url if MOZART_AWS_ES == true or 'es.amazonaws.com' in url else 'http://'~url~':9200' }}"{{ "," if not loop.last else "" }}
          {%- endif %}
        {%- endfor %}
      ]
      {%- else %}
        {%- if MOZART_ES_PVT_IP.startswith('https://') %}
      hosts => ["{{ MOZART_ES_PVT_IP }}"]
        {%- else %}
      hosts => ["{{ 'https://'~MOZART_ES_PVT_IP if MOZART_AWS_ES == true or 'es.amazonaws.com' in MOZART_ES_PVT_IP else 'http://'~MOZART_ES_PVT_IP~':9200' }}"]
        {%- endif %}
      {%- endif %}
      index => "%{[job][job_info][index]}"
      document_id => "%{payload_id}"
      ecs_compatibility => disabled
    }
  } else if [resource] == "worker" {
    {{ 'opensearch' if MOZART_ES_ENGINE == 'opensearch' else 'elasticsearch' }} {
      {%- if MOZART_ES_PVT_IP is iterable and MOZART_ES_PVT_IP is not string %}
      hosts => [
        {%- for url in MOZART_ES_PVT_IP %}
          {%- if url.startswith('https://') %}
        "{{ url }}"{{ "," if not loop.last else "" }}
          {%- else %}
        "{{ 'https://'~url if MOZART_AWS_ES == true or 'es.amazonaws.com' in url else 'http://'~url~':9200' }}"{{ "," if not loop.last else "" }}
          {%- endif %}
        {%- endfor %}
      ]
      {%- else %}
        {%- if MOZART_ES_PVT_IP.startswith('https://') %}
      hosts => ["{{ MOZART_ES_PVT_IP }}"]
        {%- else %}
      hosts => ["{{ 'https://'~MOZART_ES_PVT_IP if MOZART_AWS_ES == true or 'es.amazonaws.com' in MOZART_ES_PVT_IP else 'http://'~MOZART_ES_PVT_IP~':9200' }}"]
        {%- endif %}
      {%- endif %}
      index => "worker_status-%{+YYYY.MM.dd}"
      document_id => "%{celery_hostname}"
      ecs_compatibility => disabled
    }
  } else if [resource] == "task" {
    {{ 'opensearch' if MOZART_ES_ENGINE == 'opensearch' else 'elasticsearch' }} {
      {%- if MOZART_ES_PVT_IP is iterable and MOZART_ES_PVT_IP is not string %}
      hosts => [
        {%- for url in MOZART_ES_PVT_IP %}
          {%- if url.startswith('https://') %}
        "{{ url }}"{{ "," if not loop.last else "" }}
          {%- else %}
        "{{ 'https://'~url if MOZART_AWS_ES == true or 'es.amazonaws.com' in url else 'http://'~url~':9200' }}"{{ "," if not loop.last else "" }}
          {%- endif %}
        {%- endfor %}
      ]
      {%- else %}
        {%- if MOZART_ES_PVT_IP.startswith('https://') %}
      hosts => ["{{ MOZART_ES_PVT_IP }}"]
        {%- else %}
      hosts => ["{{ 'https://'~MOZART_ES_PVT_IP if MOZART_AWS_ES == true or 'es.amazonaws.com' in MOZART_ES_PVT_IP else 'http://'~MOZART_ES_PVT_IP~':9200' }}"]
        {%- endif %}
      {%- endif %}
      index => "%{index}"
      document_id => "%{uuid}"
      ecs_compatibility => disabled
    }
  } else if [resource] == "event" {
    {{ 'opensearch' if MOZART_ES_ENGINE == 'opensearch' else 'elasticsearch' }} {
      {%- if MOZART_ES_PVT_IP is iterable and MOZART_ES_PVT_IP is not string %}
      hosts => [
        {%- for url in MOZART_ES_PVT_IP %}
          {%- if url.startswith('https://') %}
        "{{ url }}"{{ "," if not loop.last else "" }}
          {%- else %}
        "{{ 'https://'~url if MOZART_AWS_ES == true or 'es.amazonaws.com' in url else 'http://'~url~':9200' }}"{{ "," if not loop.last else "" }}
          {%- endif %}
        {%- endfor %}
      ]
      {%- else %}
        {%- if MOZART_ES_PVT_IP.startswith('https://') %}
      hosts => ["{{ MOZART_ES_PVT_IP }}"]
        {%- else %}
      hosts => ["{{ 'https://'~MOZART_ES_PVT_IP if MOZART_AWS_ES == true or 'es.amazonaws.com' in MOZART_ES_PVT_IP else 'http://'~MOZART_ES_PVT_IP~':9200' }}"]
        {%- endif %}
      {%- endif %}
      index => "event_status-%{+YYYY.MM.dd}"
      document_id => "%{uuid}"
      ecs_compatibility => disabled
    }
  } else {}
}
