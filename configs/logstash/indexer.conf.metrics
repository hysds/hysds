input { 
  redis {
    host => "{{ METRICS_REDIS_PVT_IP }}"
    {% if METRICS_REDIS_PASSWORD != "" %}password => "{{ METRICS_REDIS_PASSWORD }}"{% endif %}
    # these settings should match the output of the agent
    data_type => "list"
    key => "logstash"

    # We use the 'msgpack' codec here because we expect to read
    # msgpack events from redis.
    codec => msgpack

    # add field to distinguish from sdswatch
    add_field => {
      "@index" => "logstash-%{+yyyy.MM.dd}"
    }
    ssl => true
  }

  redis {
    host => "{{ METRICS_REDIS_PVT_IP }}"
    {% if METRICS_REDIS_PASSWORD != "" %}password => "{{ METRICS_REDIS_PASSWORD }}"{% endif %}
    # these settings should match the output of the agent
    data_type => "list"
    key => "sdswatch"

    # add field to distinguish from logstash
    add_field => {
      "@index" => "sdswatch-%{+yyyy.MM.dd}"
    }
    ssl => true
  }
}

output {
  #stdout { codec => rubydebug }

  {{ 'opensearch' if METRICS_ES_ENGINE == 'opensearch' else 'elasticsearch' }} {
    {%- if METRICS_ES_PVT_IP is iterable and METRICS_ES_PVT_IP is not string %}
    hosts => [
      {%- for url in METRICS_ES_PVT_IP %}
        {%- if url.startswith('https://') %}
      "{{ url }}"{{ "," if not loop.last else "" }}
        {%- else %}
      "{{ 'https://'~url if METRICS_AWS_ES == true or 'es.amazonaws.com' in url else 'https://'~url~':9200' }}"{{ "," if not loop.last else "" }}
        {%- endif %}
      {%- endfor %}
    ]
    {%- else %}
      {%- if METRICS_ES_PVT_IP.startswith('https://') %}
    hosts => ["{{ METRICS_ES_PVT_IP }}"]
      {%- else %}
    hosts => ["{{ 'https://'~METRICS_ES_PVT_IP if METRICS_AWS_ES == true or 'es.amazonaws.com' in METRICS_ES_PVT_IP else 'https://'~METRICS_ES_PVT_IP~':9200' }}"]
      {%- endif %}
    {%- endif %}
    index => "%{[@index]}"
    ssl => true
    ssl_certificate_verification => false
    cacert => "/etc/pki/tls/certs/ca-bundle.crt"
    user => {{ OS_USER }}
    password => {{ OS_PASSWORD }}
  }
}
